#!/bin/bash

BUILD_DIR=$1
CACHE_DIR=$2

echo "-----> Checking package.json for Bun, Node.js and NPM versions"

# Function to parse JSON values
json_value() {
  KEY=$1
  num=$2
  awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$KEY'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p
}

NODE_VERSION=$(cat $BUILD_DIR/package.json | json_value 'node' 1 | xargs)
BUN_VERSION=$(cat $BUILD_DIR/package.json | json_value 'bun' 1 | xargs)
NPM_VERSION=$(cat $BUILD_DIR/package.json | json_value 'npm' 1 | xargs)

# Set a default Bun version if not specified
if [ -z "$BUN_VERSION" ]; then
    BUN_VERSION="1.0.11"  # Default to the latest version, adjust as needed
    echo "-----> Bun version not specified. Defaulting Bun to v$NODE_VERSION"
fi

# Set a default Node.js version if npm is specified but not Node.js
if [ -z "$NODE_VERSION" ] && [ ! -z "$NPM_VERSION" ]; then
    NODE_VERSION="20.9.0"  # Default to a stable LTS version, adjust as needed
    echo "-----> NPM specified without Node.js version. Defaulting Node.js to v$NODE_VERSION"
fi

# Install Bun
echo "-----> Installing Bun v$BUN_VERSION"

# Choose a directory to store the bun binary
BUN_DIR_NAME=".scalingo/bun"
BUN_DIR="$BUILD_DIR/$BUN_DIR_NAME"

# Make sure the directory exists
mkdir -p $BUN_DIR

# Define the version and distribution of Bun to download
BUN_DISTRO="linux-x64"
BUN_BINARY="bun-${BUN_DISTRO}"
BUN_URL="https://github.com/oven-sh/bun/releases/download/bun-v$BUN_VERSION/${BUN_BINARY}.zip"

# Download Bun
curl -fsSL $BUN_URL -o bun.zip

# If the download failed, exit with an error
if [ ! -f bun.zip ]; then
    echo "Failed to download Bun. Please check the provided URL."
    exit 1
fi

# Unzip Bun and make it executable
unzip -qo bun.zip -d $BUN_DIR
chmod +x $BUN_DIR/${BUN_BINARY}/bun

# Cleanup the zip file
rm bun.zip

# Install the bunx wrapper script
mkdir -p $BUILD_DIR/.bin
BUNX_PATH="$(dirname "$0")/../scripts/bunx"
cp $BUNX_PATH $BUILD_DIR/.bin/bunx
chmod +x $BUILD_DIR/.bin/bunx

# Add Bun to the PATH
export PATH="$PATH:$BUN_DIR/${BUN_BINARY}"
export PATH="$PATH:$BUILD_DIR/.bin"

# Persist the PATH change for the runtime environment
test ! -d ".profile.d" && mkdir -p .profile.d || true
echo "export PATH=\"\$HOME/$BUN_DIR_NAME/${BUN_BINARY}:\$PATH\"" > .profile.d/bun.sh
echo "export PATH=\"\$HOME/.bin:\$PATH\"" >> .profile.d/bun.sh

# Make the profile script executable
chmod +x .profile.d/bun.sh

echo "-----> Bun installed"

# Install Node.js if specified
if [ ! -z "$NODE_VERSION" ]; then
    echo "-----> Installing Node.js v$NODE_VERSION"

    # Choose a directory to store the node binary
    NODE_DIR_NAME=".scalingo/node"
    NODE_DIR="$BUILD_DIR/$NODE_DIR_NAME"
    NODE_URL="https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"

    # Make sure the directory exists
    mkdir -p $NODE_DIR

    # Download and install Node.js
    curl -s $NODE_URL | tar xz -C $BUILD_DIR/.scalingo/node --strip-components=1

    # Add Node to the PATH
    export PATH="$BUILD_DIR/.scalingo/node/bin:$PATH"

    echo "-----> Node.js installed"
else
  echo "-----> Node.js version not specified in package.json, skipping"
fi

# Install NPM if specified
if [ ! -z "$NPM_VERSION" ]; then
  echo "-----> Installing NPM v$NPM_VERSION"

  npm install -g npm@$NPM_VERSION

  echo "-----> NPM installed"
else
  echo "-----> NPM version not specified in package.json, skipping"
fi

# Here you would use bun to build your application
echo "-----> Building application with Bun"

cd $BUILD_DIR
bun install
bun run build

# Clean up the cache to prevent storing unnecessary files
rm -rf $CACHE_DIR/*

# Copy bun into the cache directory for future builds
cp -R $BUN_DIR $CACHE_DIR

echo "-----> Application built with Bun"
